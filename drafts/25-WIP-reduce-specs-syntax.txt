To: J3                                                     J3/25-XXX
From: Brandon Cook & Dan Bonachea
Subject:  Specifications and Syntax for Local Prefix Reduce Intrinsics
Date: 2025-October-13
References: J3/25-145r1, WG5/N-2249

1. Background
=============

The Fortran 202Y work list (WG5/N-2249) includes work item US20:
"Add Intrinsic and collective subroutines for prefix operations"

Paper J3/25-145r1 "Requirements for US20: Local Prefix Operation
Intrinsics" presents illustrative use cases and requirements for local
prefix operation intrinsics. That paper was passed at J3 meeting #236
in June 2025.

This document focuses on specifications and syntax exclusively for the
local prefix reduction variant, refining previous concepts based on
community and WG5 feedback. By focusing exclusively on the local
variant our aim is to allow consideration independent of the closely
related but distinct collective subroutines.

3. REDUCE PREFIX
================

3.1 Syntax
----------

The new intrinsics are:

REDUCE_PREFIX_INCLUSIVE(ARRAY, OPERATION [, ORDERED]) or
REDUCE_PREFIX_INCLUSIVE(ARRAY, OPERATION, DIM [, ORDERED])
REDUCE_PREFIX_EXCLUSIVE(ARRAY, OPERATION, INITIAL [, ORDERED]) or
REDUCE_PREFIX_EXCLUSIVE(ARRAY, OPERATION, INITIAL, DIM [, ORDERED])

3.2 Specifications
------------------

3.2.1 Definitions
-----------------

D01. Generalized noncommutative reduction

     The result of a generalized noncommutative reduction of a
     non-empty sequence of elements with binary operation f
     is the result of an iterative process.

     1. If the sequence contains a single element, the result is the
        value of that element and the process is complete.

     2. Select two adjacent elements x and y, with x immediately
        preceding y. If the reduction is "ordered", x is the first
        element in the sequence. Otherwise, the choice of x is
        processor dependent.

     3. Replace the two selected elements in the sequence with the
        single value f(x, y), preserving order.

     4. Repeat steps 1-3 until a single result is obtained.

# not sure if we use these two..
D02. Inclusive prefix reduction

     The inclusive prefix reduction of a sequence S with n elements
     s_1, s_2, ..., s_n, with binary operation f (and optional initial
     value z), is the sequence R with n elements r_1, r_2, ..., r_n.
     r_i is the generalized noncommutative reduction with f (and
     initialized by z, if provided) of the sequence s_1, s_2, ..., s_i.

D03. Exclusive prefix reduction

     The exclusive prefix reduction of a sequence S with n elements
     s_1, s_2, ..., s_n, with binary operation f and initial value z,
     is the sequence R with n elements r_1, r_2, ...r_n.
     r_1 is z, and for i>1, r_i is the generalized noncommutative
     reduction with f initialized by z of the sequence
     s_1, s_2, ..., s_{i-1}.

D04. OPERATION=ADD

     For all examples in this section, assume that ADD has been defined
     as a compliant OPERATION implementing integer addition.

3.2.2 Arguments
---------------

R01. ARRAY shall be an array of any type.

R03. OPERATION shall be a pure function with exactly two arguments;
     each argument shall be a scalar, nonallocatable, noncoarray,
     nonpointer, nonpolymorphic, nonoptional dummy data object with
     the same declared type and type parameters as ARRAY. If one
     argument has the ASYNCHRONOUS, TARGET, or VALUE attribute, the
     other shall have that attribute. Its result shall be a
     nonpolymorphic scalar and have the same declared type and type
     parameters as ARRAY. If ORDERED is absent or false, then OPERATION
     should implement a mathematically associative operation. In any case,
     OPERATION need not be commutative.

R05. DIM shall be an integer scalar with a value in the range
     1 <= DIM <= n, where n is the rank of ARRAY.

R15. ORDERED (optional) shall be a logical scalar.

3.2.2 Result Characteristics
----------------------------

R17. The result is of the same declared type, type parameters, rank,
     and shape as ARRAY.

3.2.3 Result Value: REDUCE_PREFIX_INCLUSIVE
-------------------------------------------

R31. The result of REDUCE_PREFIX_INCLUSIVE(ARRAY, OPERATION) is the
     inclusive prefix reduction (D02) of the sequence defined by
     elements of ARRAY in array element order, with the result
     sequence provided in array element order.

     Example:

     A = | 1 2 3 |
     B = REDUCE_PREFIX_INCLUSIVE(A, ADD)
     ! B = | 1 3 6 |


R35. If the ORDERED argument is present with the value true, then the
     reduction process (D01) is ordered.


R39. If ARRAY has rank one, the result of
     REDUCE_PREFIX_INCLUSIVE(ARRAY, OPERATION, DIM = DIM [, ORDERED]) has a value equal to
     REDUCE_PREFIX_INCLUSIVE(ARRAY, OPERATION[, ORDERED]).

     Otherwise, the result of REDUCE_PREFIX_INCLUSIVE(ARRAY,
     OPERATION, DIM [, ORDERED]) is defined by the
     semantics of R37 applied independently along each sequence of
     ARRAY elements in dimension DIM. More specifically, the value of
     result elements (i_1,i_2,...,i_(DIM-1),:,i_(DIM+1),...,i_n) of
     REDUCE_PREFIX_INCLUSIVE(ARRAY, OPERATION, DIM = DIM [, ORDERED = ORDERED]) is equal to:

     REDUCE_PREFIX_INCLUSIVE(
     ARRAY(i_1,i_2,...,i_(DIM-1),:,i_(DIM+1),...,i_n),
       OPERATION = OPERATION, DIM = 1
       [, ORDERED = ORDERED] ).



3.2.4 Result Value: REDUCE_PREFIX_EXCLUSIVE
-------------------------------------------
#TODO maybe define in terms of inclusive...

R51. The result of REDUCE_PREFIX_EXCLUSIVE(ARRAY, OPERATION) is the
     exclusive prefix reduction (D03) of the sequence defined by
     elements of ARRAY in array element order, with the result
     sequence provided in array element order.

     Example:

     A = | 1 2 3 |
     B = REDUCE_PREFIX_EXCLUSIVE(A, ADD, INITIAL=0)
     ! B = | 0 1 3 |

     Example:

     A = | 1 2 3 |
     B = REDUCE_PREFIX_EXCLUSIVE(A, ADD, INITIAL=42)
     ! B = | 42 43 45 |

R55. If the ORDERED argument is present with the value true, then the
     reduction process (D01) is ordered.


     R59. If ARRAY has rank one, the result of
     REDUCE_PREFIX_EXCLUSIVE(ARRAY, OPERATION, DIM = DIM [, INITIAL, ORDERED]) has a value equal to
     REDUCE_PREFIX_EXCLUSIVE(ARRAY, OPERATION[, INITIAL, ORDERED]).

     Otherwise, the result of REDUCE_PREFIX_EXCLUSIVE(ARRAY,
     OPERATION, DIM [, INITIAL, ORDERED]) is defined by the
     semantics of R57 applied independently along each sequence of
     ARRAY elements in dimension DIM. More specifically, the value of
     result elements (i_1,i_2,...,i_(DIM-1),:,i_(DIM+1),...,i_n) of
     REDUCE_PREFIX_EXCLUSIVE(ARRAY, OPERATION, DIM = DIM [, INITIAL = INITIAL, ORDERED = ORDERED])
     is equal to:

     REDUCE_PREFIX_EXCLUSIVE(
     ARRAY(i_1,i_2,...,i_(DIM-1),:,i_(DIM+1),...,i_n),
        OPERATION = OPERATION, DIM = 1,
        INITIAL = INITIAL, ORDERED = ORDERED] ).

     Example:

     A = | 1 2 3 4 |
         | 1 1 2 3 |
     M = | T T F T |
         | T T T T |
     B = REDUCE_PREFIX_EXCLUSIVE(A, ADD, INITIAL=0, DIM=2, MASK=M)
     ! B = | 0 1 3 3 |
           | 0 1 2 4 |

