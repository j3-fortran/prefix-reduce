To: J3                                                     J3/25-####
From: Brandon Cook & Dan Bonachea
Subject: Edits for US20 Collective Subroutines for Prefix Reductions
Date: 2025-October-17
References: 25-177r1, J3/25-144r1, J3/25-145r1, J3/25-007r1, WG5/N-2239

TODO
1. DONE Changelog in Introduction
2. DONE: Insert routines in Table 16.1
3. Add a new section for each new collective (4 in total).
4. DONE: Update Annex A.2
5. Order of words in the name? 
   RESOLVED: leave as-is for this paper
6. Add multiple forms as resolved in plenary, incorporating TEAM and
   COMPLETION in syntax
   Leave placeholders for description of new arguments for r0
7. Clone REDUCE_INCLUSIVE

1. Background
=============

The Fortran 202Y work list (WG5/N-2239) includes work item US20:
"Add Intrinsic and collective subroutines for prefix operations"

Paper J3/25-144r1 "Requirements for US20: Collective Subroutines for
Prefix Operations" presents illustrative use cases and requirements
for collective subroutines for prefix reduction.  That paper was
passed at J3 meeting #236 in June 2025. Specifications and syntax for
the collective subroutine variants of prefix reduction operations,
25-177r1, was passed in the October 2025 meeting #237.


2. Edits to J3/25-007r1:

[xv] Add to "Intrinsic procedures" the sentences:

"The new intrinsic subroutines CO_SUM_PREFIX_INCLUSIVE,
CO_SUM_PREFIX_EXCLUSIVE, CO_REDUCE_PREFIX_INCLUSIVE, and
CO_REDUCE_PREFIX_EXCLUSIVE perform collective prefix reduction
operations across images."

[383] In 16.7 Standard generic intrinsic procedures, Table 16.1,
after the entry for CO_REDUCE add two new entries (with four forms each):

"
CO_REDUCE_PREFIX_EXCLUSIVE (A, OPERATION, IDENTITY [, STAT, ERRMSG]) or \
    C    Generalized exclusive prefix reduction across images.
CO_REDUCE_PREFIX_EXCLUSIVE (A, OPERATION, IDENTITY, COMPLETION \
                            [, STAT, ERRMSG]) or
CO_REDUCE_PREFIX_EXCLUSIVE (A, OPERATION, IDENTITY, TEAM \
                            [, STAT, ERRMSG]) or
CO_REDUCE_PREFIX_EXCLUSIVE (A, OPERATION, IDENTITY, TEAM, COMPLETION \
                            [, STAT, ERRMSG]) 
"

and:

"
CO_REDUCE_PREFIX_INCLUSIVE (A, OPERATION [, STAT, ERRMSG]) or \
    C    Generalized inclusive prefix reduction across images.
CO_REDUCE_PREFIX_INCLUSIVE (A, OPERATION, COMPLETION \
                            [, STAT, ERRMSG]) or
CO_REDUCE_PREFIX_INCLUSIVE (A, OPERATION, TEAM \
                            [, STAT, ERRMSG]) or
CO_REDUCE_PREFIX_INCLUSIVE (A, OPERATION, TEAM, COMPLETION \
                            [, STAT, ERRMSG]) 
"

[383] In 16.7 Standard generic intrinsic procedures, Table 16.1,
after the entry for CO_SUM add two new entries (with four forms each):

"
CO_SUM_PREFIX_EXCLUSIVE (A, [, STAT, ERRMSG]) or \
    C    Compute exclusive prefix sum across images.
CO_SUM_PREFIX_EXCLUSIVE (A, COMPLETION [, STAT, ERRMSG]) or
CO_SUM_PREFIX_EXCLUSIVE (A, TEAM [, STAT, ERRMSG]) or
CO_SUM_PREFIX_EXCLUSIVE (A, TEAM, COMPLETION [, STAT, ERRMSG])
"

and:

"
CO_SUM_PREFIX_INCLUSIVE (A, [, STAT, ERRMSG]) or \
    C    Compute inclusive prefix sum across images.
CO_SUM_PREFIX_INCLUSIVE (A, COMPLETION [, STAT, ERRMSG]) or
CO_SUM_PREFIX_INCLUSIVE (A, TEAM [, STAT, ERRMSG]) or
CO_SUM_PREFIX_INCLUSIVE (A, TEAM, COMPLETION [, STAT, ERRMSG])
"

[411:20+] In 16.9 Specifications of the standard intrinsic proceedures,
after the specification of CO_REDUCE, add:

16.9.?? \
CO_REDUCE_PREFIX_EXCLUSIVE (A, OPERATION, IDENTITY [, STAT, ERRMSG]) or 
CO_REDUCE_PREFIX_EXCLUSIVE (A, OPERATION, IDENTITY, COMPLETION \
                            [, STAT, ERRMSG]) or
CO_REDUCE_PREFIX_EXCLUSIVE (A, OPERATION, IDENTITY, TEAM \
                            [, STAT, ERRMSG]) or
CO_REDUCE_PREFIX_EXCLUSIVE (A, OPERATION, IDENTITY, TEAM, COMPLETION \
                            [, STAT, ERRMSG]) 

<<Description.>> Generalized exclusive prefix reduction across images.

<<Class.>> Collective subroutine.

<<Arguments.>>

A shall not be polymorphic. It shall not be of a type with an ultimate
  component that is allocatable or a pointer. It shall have the same shape,
  type, and type parameter values, in corresponding references. It shall
  not be a coindexed object. It is an INTENT (INOUT) argument.

  If A is scalar, the computed value provided to any given image is the
  result of the exclusive prefix reduction operation described below.
  If A is an array, each element of the computed value provided to any
  given image is equal to the result of the exclusive prefix reduction
  operation described below, as applied to corresponding elements of A in
  corresponding references.

  The computed value is assigned to A if no error condition
  occurs. Otherwise, A becomes undefined.

IDENTITY shall be a scalar with the same declared type and type parameter
         values as A. IDENTITY shall have the same value in corresponding
         references.

OPERATION shall be a pure function with exactly two arguments; the result
          and each argument shall be a scalar, nonallocatable, noncoarray,
          nonpointer, nonpolymorphic data object with the same type and
          type parameter values as A. The arguments shall not be optional.
          If one argument has the ASYNCHRONOUS, TARGET, or VALUE attribute,
          the other shall have that attribute. OPERATION shall implement a
          mathematically associative operation. OPERATION shall be the same
          function on all images in corresponding references.
          
  The computed value for an exclusive prefix reduction over a list of
  values is the result of an iterative process. 
  Each scalar input value provided by image i is referred to as A_i.
  The corresponding computed result value provided to image i is referred
  to as R_i.
  S_i is initially the ordered list [IDENTITY, A_1, ..., A_{i-1}].
  Each iteration starts with a processor-dependent choice of item x from
  the list S_i.  Adjacent items x and y (where x preceeds y) are removed
  from the list and replaced with the value of OPERATION(x, y).  The
  process terminates when the list has only one item; this is the computed
  value of R_i.

STAT (optional) shall be a noncoindexed integer scalar with a decimal
     exponent range of at least four. It is an INTENT (OUT) argument.

ERRMSG (optional) shall be a noncoindexed default character scalar. It
       is an INTENT (INOUT) argument.

The semantics of STAT and ERRMSG are described in 16.6.

<<Example.>> 
 
*** TODO ***
Examples:
EXCLUSIVE
  MAXLOC over a derived type of real value and integer image ID
    computes max value in prefix and the image that provided it
INCLUSIVE
  derived type: value and boolean
    operation on boolean flag is XOR
    illustrates segmented prefix reduction
    MPI Example 6.24.

[412:4+] In 16.9 Specifications of the standard intrinsic proceedures,
after the specification of CO_SUM, add:

16.9.?? CO_SUM_PREFIX_EXCLUSIVE (A [, STAT, ERRMSG]) or 
        CO_SUM_PREFIX_EXCLUSIVE (A, COMPLETION [, STAT, ERRMSG]) or
        CO_SUM_PREFIX_EXCLUSIVE (A, TEAM [, STAT, ERRMSG]) or
        CO_SUM_PREFIX_EXCLUSIVE (A, TEAM, COMPLETION [, STAT, ERRMSG])

<<Description.>> Compute exclusive prefix sum across images.

<<Class.>> Collective subroutine.

<<Arguments.>>

A shall be of numeric type. It shall have the same shape, type, and
  type parameter values, in corresponding references. It shall not be
  a coindexed object. It is an INTENT (INOUT) argument.

  The computed value provided to image one is equal to the value zero.
  If A is scalar, the computed value provided to any given image I (with I
  greater than one) is equal to a processor-dependent approximation to the
  sum of the values of A in corresponding references provided by images
  1 to (I-1).
  If A is an array, each element of the computed value provided to any
  given image I (with I greater than one) is equal to a processor-dependent
  approximation to the sum of the values in corresponding elements of A in
  corresponding references provided by images 1 to (I-1).

  The computed value is assigned to A if no error condition
  occurs. Otherwise, A becomes undefined.
 
STAT (optional) shall be a noncoindexed integer scalar with a decimal
     exponent range of at least four. It is an INTENT (OUT) argument.

ERRMSG (optional) shall be a noncoindexed default character scalar. It
       is an INTENT (INOUT) argument.

The semantics of STAT and ERRMSG are described in 16.6.

<<Example.>> If the number of images in the current team is three and
the value of A is [1, 2] on image one, [3, 4] on image two, and [5, 6]
on image three, after executing the statement CALL
CO_SUM_PREFIX_EXCLUSIVE(A), the value of A is [0, 0] on image one, [1, 2]
on image two, and [4, 6] on image three.


16.9.?? CO_SUM_PREFIX_INCLUSIVE (A [, STAT, ERRMSG]) or 
        CO_SUM_PREFIX_INCLUSIVE (A, COMPLETION [, STAT, ERRMSG]) or
        CO_SUM_PREFIX_INCLUSIVE (A, TEAM [, STAT, ERRMSG]) or
        CO_SUM_PREFIX_INCLUSIVE (A, TEAM, COMPLETION [, STAT, ERRMSG])

<<Description.>> Compute inclusive prefix sum across images.

<<Class.>> Collective subroutine.

<<Arguments.>>

A shall be of numeric type. It shall have the same shape, type, and
  type parameter values, in corresponding references. It shall not be
  a coindexed object. It is an INTENT (INOUT) argument.

  If A is scalar, the computed value provided to any given image I is equal
  to a processor-dependent approximation to the sum of the values of A in
  corresponding references provided by images 1 to I.
  If A is an array, each element of the computed value provided to any
  given image I is equal to a processor-dependent approximation to the sum
  of the values in corresponding elements of A in corresponding references
  provided by images 1 to I.

  The computed value is assigned to A if no error condition
  occurs. Otherwise, A becomes undefined.
 
STAT (optional) shall be a noncoindexed integer scalar with a decimal
     exponent range of at least four. It is an INTENT (OUT) argument.

ERRMSG (optional) shall be a noncoindexed default character scalar. It
       is an INTENT (INOUT) argument.

The semantics of STAT and ERRMSG are described in 16.6.

<<Example.>> If the number of images in the current team is three and
the value of A is [1, 2] on image one, [3, 4] on image two, and [5, 6]
on image three, after executing the statement CALL
CO_SUM_PREFIX_INCLUSIVE(A), the value of A is [1, 2] on image one, [4, 6]
on image two, and [9, 12] on image three.



[596:19-20] In Annex A.2 Processor dependencies, replace the following
line:

"* the computed value of the intrinsic subroutine CO_REDUCE (16.9.57) and
   the intrinsic subroutine CO_SUM (16.9.58);"

with the following line:

"* the computed value of the intrinsic subroutines CO_REDUCE (16.9.57),
   CO_REDUCE_PREFIX_EXCLUSIVE (16.9.??), CO_REDUCE_PREFIX_INCLUSIVE
   (16.9.??), CO_SUM (16.9.58), CO_SUM_PREFIX_EXCLUSIVE (16.9.??) and
   CO_SUM_PREFIX_INCLUSIVE (16.9.??);"


=====================================================
 OLD STUFF BELOW
=====================================================

          ** TODO: Maybe append to OPERATION requirements for REDUCE:
          , and shall not depend on the value of THIS_IMAGE().


CO_REDUCE verbiage:

If A is scalar, the computed value is the result of the reduction operation of
applying OPERATION to the values of A in all corresponding references. If A is
an array, each element of the computed value is equal to the result of the
reduction operation of applying OPERATION to corresponding elements of A in all
corresponding references.
...
The computed value of a reduction operation over a set of values is the
result of an iterative process. Each iteration involves the evaluation of
OPERATION (x, y) for x and y in the set, the removal of x and y from the
set, and the addition of the value of OPERATION (x, y) to the set. The
process terminates when the set has only one element; this is the computed
value.

Pathological example:

pure function OPERATION(x,y) result(r)
  INTEGER :: x, y, r
  r = MAX(a,b,THIS_IMAGE())
end function

This OPERATION is a pure function as defined in F23 15.7 and 16.1. 
It is associative and commutative.
It also satisfies all the other requirements for the OPERATION argument to
CO_REDUCE or CO_REDUCE_PREFIX_* with A of integer type.

Passing this OPERATION along with the following arguments to either
CO_REDUCE or CO_REDUCE_PREFIX_* will reveal some information about which
images evaluated the OPERATION for any given input element (and for any
given image's result).

A = [0, 0]
IDENTITY = 0

Other similar OPERATION functions can be crafted over a derived type to
reveal arbitrary information about which images executed the operation and
even in what order.


3. Image ordering
=================

All the intrinsics proposed in this paper are collective subroutines,
and will be subject to all of the common requirements specified in
section 16.6 of J3/25-007r1. So for example, they must be invoked
collectively by the same statement on all active images in the current
team, with arguments that meet specified constraints for corresponding
references.

Mathematically, a prefix reduction operation accepts an ordered list
of input values and computes an ordered list of output result
values. We propose collective prefix reductions where both these input
and output lists are ordered according to the image indexes in the
selected team. Specifically, for an inclusive prefix reduction, the
result R_i provided to image i is computed using the inputs provided
by images (1:i). For an exclusive prefix reduction, the result R_i
provided to image i is computed using the inputs provided by images
(1:i-1).

4. Collective CO_SUM_PREFIX subroutines
========================================

Prefix reduction with sum (addition) across images.

4.0 Syntax
----------

CO_SUM_PREFIX_INCLUSIVE(A [, STAT, ERRMSG])
CO_SUM_PREFIX_EXCLUSIVE(A [, STAT, ERRMSG])

CO_SUM_PREFIX_EXCLUSIVE
CO_PREFIX_SUM_INCLUSIVE
CO_SUM_INCLUSIVE_PREFIX
CO_INCLUSIVE_PREFIX_SUM

4.1 Specifications
------------------

S01. A shall be of numeric type.

S03. A shall have the same shape, type, and type parameter values in
     corresponding references.

S05. A is an INTENT(INOUT) argument and shall not be a coindexed
     object.

S07. Each element of the computed value assigned into A is equal to a
     processor-dependent approximation to the inclusive/exclusive
     (respectively) prefix sum of corresponding elements of A provided
     in corresponding references.

S09. Definition of computed values assigned to A.

     The input value provided by image i is referred to as A_i.
     The computed value provided to image i is referred to as R_i.
     In the inclusive case, S_i is the ordered list [A_1, ..., A_i].
     In the exclusive case, S_i is the ordered list [A_1, ..., A_{i-1}].
     If A is scalar, the value of R_i is a processor-dependent
     approximation of the sum of the elements of S_i.
     If A is an array, each element in the computed value of R_i is a
     processor-dependent approximation of the sum of corresponding
     elements across the elements of S_i.

S15. The computed value is assigned to A if no error condition
     occurs. Otherwise, A becomes undefined (as in CO_SUM).

S17. The specifications for STAT and ERRMSG directly mirror the same
     arguments in the existing collective subroutines, and the semantics
     of STAT and ERRMSG are described in section 16.6 of J3/25-007r1.

5. Collective CO_REDUCE_PREFIX subroutines
===========================================

Generalized prefix reduction across images.

5.0 Syntax
----------

CO_REDUCE_PREFIX_INCLUSIVE(A, OPERATION [, STAT, ERRMSG])
CO_REDUCE_PREFIX_EXCLUSIVE(A, OPERATION, IDENTITY [, STAT, ERRMSG])

5.1 Specifications
------------------

R01. A shall not be polymorphic or have an ultimate component that is
     allocatable or a pointer.

R03. A shall have the same shape, type, and type parameter values in
     corresponding references.

R05. A is an INTENT(INOUT) argument and shall not be a coindexed
     object.

R07. OPERATION shall be a pure function.

R09. OPERATION shall accept exactly two arguments; the result and
     each argument must be a scalar, nonallocatable, noncoarray,
     nonpointer, nonpolymorphic, nonoptional data object with the same
     declared type and type parameter values as the input ARRAY.

R11. OPERATION shall implement a mathematically associative operation.

R13. OPERATION shall be the same function on all images in
     corresponding references.

R15. IDENTITY shall be a scalar with the same declared type and type
     parameters as A.

R17. IDENTITY shall have the same value in corresponding references.

R19. Definition of computed values assigned to A.

     The input value provided by image i is referred to as A_i.
     The computed value provided to image i is referred to as R_i.
     In the inclusive case S_i is the ordered list [A_1, ..., A_i].
     In the exclusive case S_i is the ordered list
     [IDENTITY, A_1, ..., A_{i-1}].
     The value of R_i is the result of applying OPERATION to adjacent
     items of S_i, without commutation, until a single item remains.
     If A is an array, OPERATION is applied elementwise.


R21. The specifications for STAT and ERRMSG directly mirror the same
     arguments in the existing collective subroutines, and the
     semantics of STAT and ERRMSG are described in section 16.6 of
     J3/25-007r1.

===END===
